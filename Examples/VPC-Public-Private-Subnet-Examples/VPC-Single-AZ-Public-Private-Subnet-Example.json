{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "A VPC with a public, private and optional data subnet in a single availability zone.",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "General Configuration"
          },
          "Parameters": ["AvailabilityZone", "VpcCidrBlock"]
        },
        {
          "Label": {
            "default": "Public Subnet Configuration"
          },
          "Parameters": ["PublicSubnetCidrBlock", "MapPublicIpOnLaunch"]
        },
        {
          "Label": {
            "default": "Private Subnet Configuration"
          },
          "Parameters": ["PrivateSubnetCidrBlock", "IncludeNat"]
        },
        {
          "Label": {
            "default": "Data Subnet Configuration"
          },
          "Parameters": ["IncludeDataSubnet", "DataSubnetCidrBlock"]
        }
      ],
      "ParameterLabels": {
        "AvailabilityZone": {
          "default": "Availability Zone"
        },
        "VpcCidrBlock": {
          "default": "VPC IPv4 CIDR Block"
        },
        "PublicSubnetCidrBlock": {
          "default": "Public Subnet IPv4 CIDR Block"
        },
        "MapPublicIpOnLaunch": {
          "default": "Map Public IP On Launch"
        },
        "PrivateSubnetCidrBlock": {
          "default": "Private Subnet IPv4 CIDR Block"
        },
        "IncludeNat": {
          "default": "Include NAT Gateway"
        },
        "IncludeDataSubnet": {
          "default": "Include Data Subnet"
        },
        "DataSubnetCidrBlock": {
          "default": "Data Subnet IPv4 CIDR Block"
        }
      }
    }
  },
  "Parameters": {
    "AvailabilityZone": {
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Description": "The Availability Zone for the public, private and optional data subnet."
    },
    "VpcCidrBlock": {
      "Type": "String",
      "Default": "192.168.0.0/16",
      "Description": "The IPv4 CIDR block to be used for the VPC.",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    },
    "PublicSubnetCidrBlock": {
      "Type": "String",
      "Default": "192.168.0.0/24",
      "Description": "The IPv4 CIDR block to be used for the public subnet.",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    },
    "MapPublicIpOnLaunch": {
      "Type": "String",
      "AllowedValues": [true, false],
      "Default": false,
      "Description": "Whether public IP addresses are assigned when EC2 Instances are launched in the public subnet."
    },
    "PrivateSubnetCidrBlock": {
      "Type": "String",
      "Default": "192.168.1.0/24",
      "Description": "The IPv4 CIDR block to be used for the private subnet.",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    },
    "IncludeNat": {
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"],
      "Description": "Creates a NAT gateway if set to 'true'. Allows instances in the private subnet to access the internet."
    },
    "IncludeDataSubnet": {
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"],
      "Description": "Creates a data subnet if set to 'true'."
    },
    "DataSubnetCidrBlock": {
      "Type": "String",
      "Default": "192.168.2.0/24",
      "Description": "The IPv4 CIDR block to be used for the data subnet.",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    }
  },
  "Conditions": {
    "CreateNatGateway": {
      "Fn::Equals": [
        {
          "Ref": "IncludeNat"
        },
        "true"
      ]
    },
    "CreateDataSubnet": {
      "Fn::Equals": [
        {
          "Ref": "IncludeDataSubnet"
        },
        "true"
      ]
    }
  },
  "Resources": {
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VpcCidrBlock"
        },
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Internet Gateway"
            }
          }
        ]
      }
    },
    "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        },
        "CidrBlock": {
          "Ref": "PublicSubnetCidrBlock"
        },
        "MapPublicIpOnLaunch": {
          "Ref": "MapPublicIpOnLaunch"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Public Subnet"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PublicSubnetRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Public Subnet Route Table"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PublicSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet"
        }
      }
    },
    "InternetGatewayRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PrivateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnetCidrBlock"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Private Subnet"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PrivateSubnetRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Private Subnet Route Table"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PrivateSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateSubnetRouteTable"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet"
        }
      }
    },
    "NatElasticIp": {
      "Type": "AWS::EC2::EIP",
      "Condition": "CreateNatGateway"
    },
    "NatGateway": {
      "Type": "AWS::EC2::NatGateway",
      "Condition": "CreateNatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": ["NatElasticIp", "AllocationId"]
        },
        "SubnetId": {
          "Ref": "PublicSubnet"
        }
      }
    },
    "NatGatewayRoute": {
      "Type": "AWS::EC2::Route",
      "Condition": "CreateNatGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateSubnetRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NatGateway"
        }
      }
    },
    "DataSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        },
        "CidrBlock": {
          "Ref": "DataSubnetCidrBlock"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Data Subnet"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "DataSubnetRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Data Subnet Route Table"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "DataSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "RouteTableId": {
          "Ref": "DataSubnetRouteTable"
        },
        "SubnetId": {
          "Ref": "DataSubnet"
        }
      }
    },
    "PublicSubnetNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Public Subnet Network ACL"
            }
          }
        ],
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "PublicSubnetNetworkAclInboundRule": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicSubnetNetworkAcl"
        },
        "CidrBlock": "0.0.0.0/0",
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 100
      }
    },
    "PublicSubnetNetworkAclOutboundRule": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicSubnetNetworkAcl"
        },
        "CidrBlock": "0.0.0.0/0",
        "Egress": true,
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 100
      }
    },
    "PublicSubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": { "Ref": "PublicSubnetNetworkAcl" },
        "SubnetId": { "Ref": "PublicSubnet" }
      }
    },
    "PrivateSubnetNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Private Subnet Network ACL"
            }
          }
        ],
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "PrivateSubnetNetworkAclInboundRule": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateSubnetNetworkAcl"
        },
        "CidrBlock": {
          "Ref": "VpcCidrBlock"
        },
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 100
      }
    },
    "PrivateSubnetNetworkAclOutboundRule": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateSubnetNetworkAcl"
        },
        "CidrBlock": {
          "Ref": "VpcCidrBlock"
        },
        "Egress": true,
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 100
      }
    },
    "PrivateSubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": { "Ref": "PrivateSubnetNetworkAcl" },
        "SubnetId": { "Ref": "PrivateSubnet" }
      }
    },
    "DataSubnetNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Data Subnet Network ACL"
            }
          }
        ],
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "DataSubnetNetworkAclInboundRule": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "NetworkAclId": {
          "Ref": "DataSubnetNetworkAcl"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnetCidrBlock"
        },
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 100
      }
    },
    "DataSubnetNetworkAclOutboundRule": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "NetworkAclId": {
          "Ref": "DataSubnetNetworkAcl"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnetCidrBlock"
        },
        "Egress": true,
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 100
      }
    },
    "DataSubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "NetworkAclId": { "Ref": "DataSubnetNetworkAcl" },
        "SubnetId": { "Ref": "DataSubnet" }
      }
    }
  },
  "Outputs": {
    "Vpc": {
      "Description": "The resource ID of the VPC.",
      "Value": {
        "Ref": "Vpc"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Vpc"
        }
      }
    },
    "VpcCidrBlock": {
      "Description": "The IPv4 CIDR block of the VPC.",
      "Value": {
        "Ref": "VpcCidrBlock"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-VpcCidrBlock"
        }
      }
    },
    "PublicSubnet": {
      "Description": "The resource ID of the public subnet.",
      "Value": {
        "Ref": "PublicSubnet"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-PublicSubnet"
        }
      }
    },
    "PublicSubnetCidrBlock": {
      "Description": "The IPv4 CIDR block of the public subnet.",
      "Value": {
        "Ref": "PublicSubnetCidrBlock"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-PublicSubnetCidrBlock"
        }
      }
    },
    "PrivateSubnet": {
      "Description": "The resource ID of the private subnet.",
      "Value": {
        "Ref": "PrivateSubnet"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-PrivateSubnet"
        }
      }
    },
    "PrivateSubnetCidrBlock": {
      "Description": "The IPv4 CIDR block of the private subnet.",
      "Value": {
        "Ref": "PrivateSubnetCidrBlock"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-PrivateSubnetCidrBlock"
        }
      }
    },
    "DataSubnet": {
      "Condition": "CreateDataSubnet",
      "Description": "The resource ID of the data subnet.",
      "Value": {
        "Ref": "DataSubnet"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DataSubnet"
        }
      }
    },
    "DataSubnetCidrBlock": {
      "Condition": "CreateDataSubnet",
      "Description": "The IPv4 CIDR block of the data subnet.",
      "Value": {
        "Ref": "DataSubnetCidrBlock"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DataSubnetCidrBlock"
        }
      }
    }
  }
}
