{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "A VPC with public, private and optional data subnets in two availability zones.",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "General Configuration"
          },
          "Parameters": ["VpcCidrBlock"]
        },
        {
          "Label": {
            "default": "Public Subnet Configuration"
          },
          "Parameters": [
            "PublicSubnet1CidrBlock",
            "PublicSubnet2CidrBlock",
            "MapPublicIpOnLaunch"
          ]
        },
        {
          "Label": {
            "default": "Private Subnet Configuration"
          },
          "Parameters": [
            "PrivateSubnet1CidrBlock",
            "PrivateSubnet2CidrBlock",
            "IncludeNat"
          ]
        },
        {
          "Label": {
            "default": "Data Subnet Configuration"
          },
          "Parameters": [
            "IncludeDataSubnets",
            "DataSubnet1CidrBlock",
            "DataSubnet2CidrBlock"
          ]
        }
      ],
      "ParameterLabels": {
        "VpcCidrBlock": {
          "default": "VPC IPv4 CIDR Block"
        },
        "PublicSubnet1CidrBlock": {
          "default": "Public Subnet 1 IPv4 CIDR Block"
        },
        "PublicSubnet2CidrBlock": {
          "default": "Public Subnet 2 IPv4 CIDR Block"
        },
        "MapPublicIpOnLaunch": {
          "default": "Map Public IP On Launch"
        },
        "PrivateSubnet1CidrBlock": {
          "default": "Private Subnet 1 IPv4 CIDR Block"
        },
        "PrivateSubnet2CidrBlock": {
          "default": "Private Subnet 2 IPv4 CIDR Block"
        },
        "IncludeNat": {
          "default": "Include NAT Gateway"
        },
        "IncludeDataSubnets": {
          "default": "Include Data Subnets"
        },
        "DataSubnet1CidrBlock": {
          "default": "Data Subnet 1 IPv4 CIDR Block"
        },
        "DataSubnet2CidrBlock": {
          "default": "Data Subnet 2 IPv4 CIDR Block"
        }
      }
    }
  },
  "Parameters": {
    "VpcCidrBlock": {
      "Type": "String",
      "Default": "192.168.0.0/16",
      "Description": "The IPv4 CIDR block to be used for the VPC.",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    },
    "PublicSubnet1CidrBlock": {
      "Type": "String",
      "Default": "192.168.0.0/24",
      "Description": "The IPv4 CIDR block to be used for Public Subnet 1.",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    },
    "PublicSubnet2CidrBlock": {
      "Type": "String",
      "Default": "192.168.1.0/24",
      "Description": "The IPv4 CIDR block to be used for Public Subnet 2.",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    },
    "MapPublicIpOnLaunch": {
      "Type": "String",
      "AllowedValues": [true, false],
      "Default": false,
      "Description": "Whether public IP addresses are assigned when EC2 Instances are launched in the public subnets."
    },
    "PrivateSubnet1CidrBlock": {
      "Type": "String",
      "Default": "192.168.2.0/24",
      "Description": "The IPv4 CIDR block to be used for Private Subnet 1.",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    },
    "PrivateSubnet2CidrBlock": {
      "Type": "String",
      "Default": "192.168.3.0/24",
      "Description": "The IPv4 CIDR block to be used for Private Subnet 2.",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    },
    "IncludeNat": {
      "Type": "String",
      "Default": false,
      "AllowedValues": [true, false],
      "Description": "Creates a NAT gateway if set to 'true'. Allows instances in the private subnets to access the internet."
    },
    "IncludeDataSubnets": {
      "Type": "String",
      "Default": false,
      "AllowedValues": [true, false],
      "Description": "Creates data subnets if set to 'true'."
    },
    "DataSubnet1CidrBlock": {
      "Type": "String",
      "Default": "192.168.4.0/24",
      "Description": "The IPv4 CIDR block to be used for Data Subnet 1.",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    },
    "DataSubnet2CidrBlock": {
      "Type": "String",
      "Default": "192.168.5.0/24",
      "Description": "The IPv4 CIDR block to be used for Data Subnet 2.",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    }
  },
  "Conditions": {
    "CreateNatGateway": {
      "Fn::Equals": [
        {
          "Ref": "IncludeNat"
        },
        true
      ]
    },
    "CreateDataSubnet": {
      "Fn::Equals": [
        {
          "Ref": "IncludeDataSubnets"
        },
        true
      ]
    }
  },
  "Resources": {
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VpcCidrBlock"
        },
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Internet Gateway"
            }
          }
        ]
      }
    },
    "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": ["0", { "Fn::GetAZs": { "Ref": "AWS::Region" } }]
        },
        "CidrBlock": {
          "Ref": "PublicSubnet1CidrBlock"
        },
        "MapPublicIpOnLaunch": {
          "Ref": "MapPublicIpOnLaunch"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Public Subnet 1"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PublicSubnet1RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Public Subnet 1 Route Table"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicSubnet1RouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      }
    },
    "PublicSubnet1InternetGatewayRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicSubnet1RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": ["1", { "Fn::GetAZs": { "Ref": "AWS::Region" } }]
        },
        "CidrBlock": {
          "Ref": "PublicSubnet2CidrBlock"
        },
        "MapPublicIpOnLaunch": {
          "Ref": "MapPublicIpOnLaunch"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Public Subnet 2"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PublicSubnet2RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Public Subnet 2 Route Table"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicSubnet2RouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      }
    },
    "PublicSubnet2InternetGatewayRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicSubnet2RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": ["0", { "Fn::GetAZs": { "Ref": "AWS::Region" } }]
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet1CidrBlock"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Private Subnet 1"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PrivateSubnet1RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Private Subnet 1 Route Table"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PrivateSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateSubnet1RouteTable"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        }
      }
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": ["1", { "Fn::GetAZs": { "Ref": "AWS::Region" } }]
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet2CidrBlock"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Private Subnet 2"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PrivateSubnet2RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Private Subnet 2 Route Table"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PrivateSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateSubnet2RouteTable"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        }
      }
    },
    "NatGateway1ElasticIp": {
      "Type": "AWS::EC2::EIP",
      "Condition": "CreateNatGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Public Subnet 1 NAT Gateway Elastic IP"
            }
          }
        ]
      }
    },
    "NatGateway1": {
      "Type": "AWS::EC2::NatGateway",
      "Condition": "CreateNatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": ["NatGateway1ElasticIp", "AllocationId"]
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Public Subnet 1 NAT Gateway"
            }
          }
        ]
      }
    },
    "PrivateSubnet1NatGatewayRoute": {
      "Type": "AWS::EC2::Route",
      "Condition": "CreateNatGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateSubnet1RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NatGateway1"
        }
      }
    },
    "NatGateway2ElasticIp": {
      "Type": "AWS::EC2::EIP",
      "Condition": "CreateNatGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Public Subnet 2 NAT Gateway Elastic IP"
            }
          }
        ]
      }
    },
    "NatGateway2": {
      "Type": "AWS::EC2::NatGateway",
      "Condition": "CreateNatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": ["NatGateway2ElasticIp", "AllocationId"]
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Public Subnet 2 NAT Gateway"
            }
          }
        ]
      }
    },
    "PrivateSubnet2NatGatewayRoute": {
      "Type": "AWS::EC2::Route",
      "Condition": "CreateNatGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateSubnet2RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NatGateway2"
        }
      }
    },
    "DataSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": ["0", { "Fn::GetAZs": { "Ref": "AWS::Region" } }]
        },
        "CidrBlock": {
          "Ref": "DataSubnet1CidrBlock"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Data Subnet 1"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "DataSubnet1RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Data Subnet 1 Route Table"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "DataSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "RouteTableId": {
          "Ref": "DataSubnet1RouteTable"
        },
        "SubnetId": {
          "Ref": "DataSubnet1"
        }
      }
    },
    "DataSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": ["1", { "Fn::GetAZs": { "Ref": "AWS::Region" } }]
        },
        "CidrBlock": {
          "Ref": "DataSubnet2CidrBlock"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Data Subnet 2"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "DataSubnet2RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Data Subnet 2 Route Table"
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "DataSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "RouteTableId": {
          "Ref": "DataSubnet2RouteTable"
        },
        "SubnetId": {
          "Ref": "DataSubnet2"
        }
      }
    },
    "PublicSubnetsNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Public Subnets Network ACL"
            }
          }
        ],
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "PublicSubnetsNetworkAclInboundRule": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicSubnetsNetworkAcl"
        },
        "CidrBlock": "0.0.0.0/0",
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 100
      }
    },
    "PublicSubnetsNetworkAclOutboundRule": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicSubnetsNetworkAcl"
        },
        "CidrBlock": "0.0.0.0/0",
        "Egress": true,
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 100
      }
    },
    "PublicSubnet1NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": { "Ref": "PublicSubnetsNetworkAcl" },
        "SubnetId": { "Ref": "PublicSubnet1" }
      }
    },
    "PublicSubnet2NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": { "Ref": "PublicSubnetsNetworkAcl" },
        "SubnetId": { "Ref": "PublicSubnet2" }
      }
    },
    "PrivateSubnetsNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Private Subnets Network ACL"
            }
          }
        ],
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "PrivateSubnetsNetworkAclInboundRule": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateSubnetsNetworkAcl"
        },
        "CidrBlock": {
          "Ref": "VpcCidrBlock"
        },
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 100
      }
    },
    "PrivateSubnetsNetworkAclOutboundRule": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateSubnetsNetworkAcl"
        },
        "CidrBlock": {
          "Ref": "VpcCidrBlock"
        },
        "Egress": true,
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 100
      }
    },
    "PrivateSubnet1NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": { "Ref": "PrivateSubnetsNetworkAcl" },
        "SubnetId": { "Ref": "PrivateSubnet1" }
      }
    },
    "PrivateSubnet2NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": { "Ref": "PrivateSubnetsNetworkAcl" },
        "SubnetId": { "Ref": "PrivateSubnet2" }
      }
    },
    "DataSubnetsNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - Data Subnets Network ACL"
            }
          }
        ],
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "DataSubnetsNetworkAclInboundRuleAllowPrivateSubnet1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "NetworkAclId": {
          "Ref": "DataSubnetsNetworkAcl"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet1CidrBlock"
        },
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 97
      }
    },
    "DataSubnetsNetworkAclInboundRuleAllowPrivateSubnet2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "NetworkAclId": {
          "Ref": "DataSubnetsNetworkAcl"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet2CidrBlock"
        },
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 98
      }
    },
    "DataSubnetsNetworkAclInboundRuleAllowDataSubnet1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "NetworkAclId": {
          "Ref": "DataSubnetsNetworkAcl"
        },
        "CidrBlock": {
          "Ref": "DataSubnet1CidrBlock"
        },
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 99
      }
    },
    "DataSubnetsNetworkAclInboundRuleAllowDataSubnet2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "NetworkAclId": {
          "Ref": "DataSubnetsNetworkAcl"
        },
        "CidrBlock": {
          "Ref": "DataSubnet2CidrBlock"
        },
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 100
      }
    },
    "DataSubnetsNetworkAclOutboundRuleAllowPrivateSubnet1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "NetworkAclId": {
          "Ref": "DataSubnetsNetworkAcl"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet1CidrBlock"
        },
        "Egress": true,
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 97
      }
    },
    "DataSubnetsNetworkAclOutboundRuleAllowPrivateSubnet2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "NetworkAclId": {
          "Ref": "DataSubnetsNetworkAcl"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet2CidrBlock"
        },
        "Egress": true,
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 98
      }
    },
    "DataSubnetsNetworkAclOutboundRuleAllowDataSubnet1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "NetworkAclId": {
          "Ref": "DataSubnetsNetworkAcl"
        },
        "CidrBlock": {
          "Ref": "DataSubnet1CidrBlock"
        },
        "Egress": true,
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 99
      }
    },
    "DataSubnetsNetworkAclOutboundRuleAllowDataSubnet2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "NetworkAclId": {
          "Ref": "DataSubnetsNetworkAcl"
        },
        "CidrBlock": {
          "Ref": "DataSubnet2CidrBlock"
        },
        "Egress": true,
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 100
      }
    },
    "DataSubnet1NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "NetworkAclId": { "Ref": "DataSubnetsNetworkAcl" },
        "SubnetId": { "Ref": "DataSubnet1" }
      }
    },
    "DataSubnet2NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Condition": "CreateDataSubnet",
      "Properties": {
        "NetworkAclId": { "Ref": "DataSubnetsNetworkAcl" },
        "SubnetId": { "Ref": "DataSubnet2" }
      }
    }
  },
  "Outputs": {
    "Vpc": {
      "Description": "The resource ID of the VPC.",
      "Value": {
        "Ref": "Vpc"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Vpc"
        }
      }
    },
    "VpcCidrBlock": {
      "Description": "The IPv4 CIDR block of the VPC.",
      "Value": {
        "Ref": "VpcCidrBlock"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-VpcCidrBlock"
        }
      }
    },
    "PublicSubnet1": {
      "Description": "The resource ID of Public Subnet 1.",
      "Value": {
        "Ref": "PublicSubnet1"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-PublicSubnet1"
        }
      }
    },
    "PublicSubnet2": {
      "Description": "The resource ID of Public Subnet 2.",
      "Value": {
        "Ref": "PublicSubnet2"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-PublicSubnet2"
        }
      }
    },
    "PublicSubnet1CidrBlock": {
      "Description": "The IPv4 CIDR block of Public Subnet 1.",
      "Value": {
        "Ref": "PublicSubnet1CidrBlock"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-PublicSubnet1CidrBlock"
        }
      }
    },
    "PublicSubnet2CidrBlock": {
      "Description": "The IPv4 CIDR block of Public Subnet 2.",
      "Value": {
        "Ref": "PublicSubnet2CidrBlock"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-PublicSubnet2CidrBlock"
        }
      }
    },
    "PrivateSubnet1": {
      "Description": "The resource ID of Private Subnet 1.",
      "Value": {
        "Ref": "PrivateSubnet1"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-PrivateSubnet1"
        }
      }
    },
    "PrivateSubnet2": {
      "Description": "The resource ID of Private Subnet 2.",
      "Value": {
        "Ref": "PrivateSubnet2"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-PrivateSubnet2"
        }
      }
    },
    "PrivateSubnet1CidrBlock": {
      "Description": "The IPv4 CIDR block of Private Subnet 1.",
      "Value": {
        "Ref": "PrivateSubnet1CidrBlock"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-PrivateSubnet1CidrBlock"
        }
      }
    },
    "PrivateSubnet2CidrBlock": {
      "Description": "The IPv4 CIDR block of Private Subnet 2.",
      "Value": {
        "Ref": "PrivateSubnet2CidrBlock"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-PrivateSubnet2CidrBlock"
        }
      }
    },
    "DataSubnet1": {
      "Condition": "CreateDataSubnet",
      "Description": "The resource ID of Data Subnet 1.",
      "Value": {
        "Ref": "DataSubnet1"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DataSubnet1"
        }
      }
    },
    "DataSubnet2": {
      "Condition": "CreateDataSubnet",
      "Description": "The resource ID of Data Subnet 2.",
      "Value": {
        "Ref": "DataSubnet2"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DataSubnet2"
        }
      }
    },
    "DataSubnet1CidrBlock": {
      "Condition": "CreateDataSubnet",
      "Description": "The IPv4 CIDR block of Data Subnet 1.",
      "Value": {
        "Ref": "DataSubnet1CidrBlock"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DataSubnet1CidrBlock"
        }
      }
    },
    "DataSubnet2CidrBlock": {
      "Condition": "CreateDataSubnet",
      "Description": "The IPv4 CIDR block of Data Subnet 2.",
      "Value": {
        "Ref": "DataSubnet2CidrBlock"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DataSubnet2CidrBlock"
        }
      }
    }
  }
}
