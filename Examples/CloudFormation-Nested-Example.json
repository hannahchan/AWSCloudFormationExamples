{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "A base stack with a VPC and Aurora database.",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": { "default": "VPC Configuration" },
          "Parameters": ["MapPublicIpOnLaunch", "IncludeNat"]
        },
        {
          "Label": { "default": "Database Configuration" },
          "Parameters": [
            "Engine",
            "DBInstanceClass",
            "IncludeReplica",
            "DeletionProtection"
          ]
        },
        {
          "Label": { "default": "Bastion Configuration" },
          "Parameters": ["DeployBastion", "InstanceType", "KeyName"]
        }
      ],
      "ParameterLabels": {
        "MapPublicIpOnLaunch": { "default": "Map Public IP On Launch" },
        "IncludeNat": { "default": "Include NAT Gateway" },
        "Engine": { "default": "Database Engine" },
        "DBInstanceClass": { "default": "Database Instance Class" },
        "IncludeReplica": { "default": "Include Replica" },
        "DeletionProtection": { "default": "Deletion Protection" },
        "DeployBastion": { "default": "Deploy Bastion" },
        "InstanceType": { "default": "Instance Type" },
        "KeyName": { "default": "Key Name" }
      }
    }
  },
  "Parameters": {
    "MapPublicIpOnLaunch": {
      "Type": "String",
      "AllowedValues": [true, false],
      "Default": false,
      "Description": "Whether public IP addresses are assigned when EC2 Instances are launched in the public subnets."
    },
    "IncludeNat": {
      "Type": "String",
      "Default": false,
      "AllowedValues": [true, false],
      "Description": "Creates a NAT gateway if set to 'true'. Allows instances in the private subnets to access the internet."
    },
    "Engine": {
      "Type": "String",
      "Default": "aurora",
      "AllowedValues": ["aurora", "aurora-mysql", "aurora-postgresql"],
      "Description": "The database engine to be used for the database cluster."
    },
    "DBInstanceClass": {
      "Type": "String",
      "Default": "db.t3.medium",
      "AllowedValues": [
        "db.r4.large",
        "db.r4.xlarge",
        "db.r4.2xlarge",
        "db.r4.4xlarge",
        "db.r4.8xlarge",
        "db.r4.16xlarge",
        "db.r5.large",
        "db.r5.xlarge",
        "db.r5.2xlarge",
        "db.r5.4xlarge",
        "db.r5.8xlarge",
        "db.r5.12xlarge",
        "db.r5.16xlarge",
        "db.r5.24xlarge",
        "db.t3.medium"
      ],
      "Description": "The database instance class to be used for the database instances."
    },
    "IncludeReplica": {
      "Type": "String",
      "Default": false,
      "AllowedValues": [true, false],
      "Description": "Creates database a replica if set to 'true'."
    },
    "DeletionProtection": {
      "Type": "String",
      "Default": false,
      "AllowedValues": [true, false],
      "Description": "Enables deletion protection if set to 'true'."
    },
    "DeployBastion": {
      "Type": "String",
      "Default": false,
      "AllowedValues": [true, false],
      "Description": "Deploys an Amazon Linux 2 bastion accessible via Systems Manager Session Manager if set to 'true'."
    },
    "InstanceType": {
      "Type": "String",
      "Default": "t3.micro",
      "AllowedValues": [
        "t3.nano",
        "t3.micro",
        "t3.small",
        "t3.medium",
        "t3.large",
        "t3.xlarge",
        "t3.2xlarge",
        "t3a.nano",
        "t3a.micro",
        "t3a.small",
        "t3a.medium",
        "t3a.large",
        "t3a.xlarge",
        "t3a.2xlarge"
      ],
      "Description": "The EC2 Instance Type to launch the bastion as."
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "The name of the Amazon EC2 Key Pair to use for the bastion."
    }
  },
  "Conditions": {
    "CreateBastion": { "Fn::Equals": [{ "Ref": "DeployBastion" }, true] }
  },
  "Resources": {
    "Vpc": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "MapPublicIpOnLaunch": { "Ref": "MapPublicIpOnLaunch" },
          "IncludeNat": { "Ref": "IncludeNat" },
          "IncludeDataSubnets": true
        },
        "TemplateURL": "./VPC-Public-Private-Subnet-Examples/VPC-Triple-AZ-Public-Private-Subnet-Example.json"
      }
    },
    "VpcEndpointSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Default security group to contain and control access to VPC endpoints.",
        "GroupName": {
          "Fn::Sub": "${AWS::StackName} - VPC Endpoint Security Group"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName} - VPC Endpoint Security Group"
            }
          }
        ],
        "VpcId": { "Fn::GetAtt": ["Vpc", "Outputs.Vpc"] }
      }
    },
    "VpcEndpointSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": { "Fn::GetAtt": ["Vpc", "Outputs.VpcCidrBlock"] },
        "Description": {
          "Fn::Sub": [
            "Allows full access from - ${VpcCidr}",
            { "VpcCidr": { "Fn::GetAtt": ["Vpc", "Outputs.VpcCidrBlock"] } }
          ]
        },
        "GroupId": { "Ref": "VpcEndpointSecurityGroup" },
        "IpProtocol": "-1"
      }
    },
    "Db": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "Engine": { "Ref": "Engine" },
          "DBInstanceClass": { "Ref": "DBInstanceClass" },
          "IncludeReplica": { "Ref": "IncludeReplica" },
          "DeletionProtection": { "Ref": "DeletionProtection" },
          "Vpc": { "Fn::GetAtt": ["Vpc", "Outputs.Vpc"] },
          "SubnetIds": {
            "Fn::Join": [
              ",",
              [
                { "Fn::GetAtt": ["Vpc", "Outputs.DataSubnet1"] },
                { "Fn::GetAtt": ["Vpc", "Outputs.DataSubnet2"] },
                { "Fn::GetAtt": ["Vpc", "Outputs.DataSubnet3"] }
              ]
            ]
          }
        },
        "TemplateURL": "./RDS-Aurora-Examples/RDS-Aurora-Example.json"
      }
    },
    "Bastion": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "CreateBastion",
      "Properties": {
        "Parameters": {
          "InstanceType": { "Ref": "InstanceType" },
          "KeyName": { "Ref": "KeyName" },
          "VpcId": { "Fn::GetAtt": ["Vpc", "Outputs.Vpc"] },
          "SubnetId": { "Fn::GetAtt": ["Vpc", "Outputs.PrivateSubnet2"] },
          "TargetSecurityGroup": {
            "Fn::GetAtt": ["Db", "Outputs.SecurityGroup"]
          }
        },
        "TemplateURL": "./Bastion-Examples/SSM-Session-Manager-Bastion-Example.json"
      }
    },
    "SsmEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Condition": "CreateBastion",
      "Properties": {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [{ "Ref": "VpcEndpointSecurityGroup" }],
        "ServiceName": { "Fn::Sub": "com.amazonaws.${AWS::Region}.ssm" },
        "SubnetIds": [
          { "Fn::GetAtt": ["Vpc", "Outputs.PrivateSubnet1"] },
          { "Fn::GetAtt": ["Vpc", "Outputs.PrivateSubnet2"] },
          { "Fn::GetAtt": ["Vpc", "Outputs.PrivateSubnet3"] }
        ],
        "VpcEndpointType": "Interface",
        "VpcId": { "Fn::GetAtt": ["Vpc", "Outputs.Vpc"] }
      }
    },
    "SsmMessagesEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Condition": "CreateBastion",
      "Properties": {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [{ "Ref": "VpcEndpointSecurityGroup" }],
        "ServiceName": {
          "Fn::Sub": "com.amazonaws.${AWS::Region}.ssmmessages"
        },
        "SubnetIds": [
          { "Fn::GetAtt": ["Vpc", "Outputs.PrivateSubnet1"] },
          { "Fn::GetAtt": ["Vpc", "Outputs.PrivateSubnet2"] },
          { "Fn::GetAtt": ["Vpc", "Outputs.PrivateSubnet3"] }
        ],
        "VpcEndpointType": "Interface",
        "VpcId": { "Fn::GetAtt": ["Vpc", "Outputs.Vpc"] }
      }
    },
    "Ec2MessagesEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Condition": "CreateBastion",
      "Properties": {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [{ "Ref": "VpcEndpointSecurityGroup" }],
        "ServiceName": {
          "Fn::Sub": "com.amazonaws.${AWS::Region}.ec2messages"
        },
        "SubnetIds": [
          { "Fn::GetAtt": ["Vpc", "Outputs.PrivateSubnet1"] },
          { "Fn::GetAtt": ["Vpc", "Outputs.PrivateSubnet2"] },
          { "Fn::GetAtt": ["Vpc", "Outputs.PrivateSubnet3"] }
        ],
        "VpcEndpointType": "Interface",
        "VpcId": { "Fn::GetAtt": ["Vpc", "Outputs.Vpc"] }
      }
    }
  },
  "Outputs": {}
}
